<?php

namespace Tests;

use App\Constants\HeaderConstant;
use Illuminate\Foundation\Testing\TestCase as BaseTestCase;
use Illuminate\Support\Facades\Redis;

abstract class TestCase extends BaseTestCase
{
    use CreatesApplication;

    protected $headers = [];

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->refreshApplication();

        $this->artisan('migrate:refresh');

        $this->beforeApplicationDestroyed(function () {
            $this->artisan('migrate:rollback');
        });

        $this->artisan('db:seed');

        Redis::command('flushdb');
    }

    public function loginAdmin()
    {
        return $this->login('123456@qq.com', '123456');
    }

    public function loginClient()
    {
        return $this->login('123457@qq.com', '123456');
    }

    public function loginClient1()
    {
        return $this->login('123458@qq.com', '123456');
    }

    public function login($email, $password)
    {

        $res = $this->post("userLogin", [
            "username" => $email, "password" => $password
        ]);

        $this->headers = [
            HeaderConstant::AUTH_TOKEN => $res->json()['token']
        ];

        return $res->json();
    }


    public function get($uri, array $headers = [])
    {
        $headers = array_merge($this->headers, $headers);

        return parent::get('api/' . $uri, $headers);
    }

    public function post($uri, array $data = [], array $headers = [])
    {
        $headers = array_merge($this->headers, $headers);

        return parent::post('api/' . $uri, $data, $headers);
    }

    public function put($uri, array $data = [], array $headers = [])
    {
        $headers = array_merge($this->headers, $headers);

        return parent::put('api/' . $uri, $data, $headers);
    }

    public function delete($uri, array $data = [], array $headers = [])
    {
        $headers = array_merge($this->headers, $headers);

        return parent::delete('api/' . $uri, $data, $headers);
    }

    public function getAdmin($uri, array $headers = [])
    {
        $headers = array_merge($this->headers, $headers);

        return parent::get('admin/' . $uri, $headers);
    }

    public function postAdmin($uri, array $data = [], array $headers = [])
    {
        $headers = array_merge($this->headers, $headers);

        return parent::post('admin/' . $uri, $data, $headers);
    }

    public function putAdmin($uri, array $data = [], array $headers = [])
    {
        $headers = array_merge($this->headers, $headers);
        return parent::put('admin/' . $uri, $data, $headers);
    }

    public function deleteAdmin($uri, array $data = [], array $headers = [])
    {
        $headers = array_merge($this->headers, $headers);

        return parent::delete('admin/' . $uri, $data, $headers);
    }

}
